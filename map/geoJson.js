"use strict";
(function (global, factory) {
    global.Geo = factory();
})(this, function () {
    const isUef = (v) => v === undefined;
    const fixed = (v) => (v * 1) | 0;
    const ceil = Math.ceil;
    let eventIdx = 0;
    const eventCache = new Array;
    class Canvas {
        constructor(width, height) {
            if (!(isUef(width) || isUef(height))) {
                this.getCanvas(width, height);
            }
        }
        getCanvas(width, height) {
            this.width = width;
            this.height = height;
            let canvas = this.canvas = createNewCanvas(width, height);
            let ctx = this.ctx = canvas.getContext('2d');
            ctx.strokeStyle = '#333';
            return canvas;
        }
    }
    var cacheMap = new WeakMap;
    class Geo extends Canvas {
        constructor(option) {
            let { width, height, data, } = option;
            super(width, height);
            this.multiple = 1;
            this.x = { max: -Infinity, min: Infinity };
            this.y = { max: -Infinity, min: Infinity };
            this.children = [];
            cacheMap.set(this, data);
        }
        draw() {
            let { children, width, height, } = this;
            let ctx = this.ctx;
            let canvas = this.canvas;
            let data = cacheMap.get(this);
            let cacheX = cacheMaxAndMin();
            let cacheY = cacheMaxAndMin();
            for (let feature of data.features) {
                let area = new Trunk(feature);
                children.push(area);
                cacheX(area.x.max);
                cacheX(area.x.min);
                cacheY(area.y.max);
                cacheY(area.y.min);
            }
            let x = this.x = cacheX();
            let y = this.y = cacheY();
            let mt = this.multiple = multiple(x, y, width, height);
            ctx.translate(-x.min * mt, -y.min * mt);
            for (let area of children) {
                area.draw(mt);
                let x = area.startPosition[0] * mt;
                let y = area.startPosition[1] * mt;
                ctx.drawImage(area.canvas, x, y);
            }
            canvas.style.transform = 'scaleY(-1)';
        }
        on(type, handler) {
            if (typeof handler != 'function')
                throw new Error('Handler must be declare');
            var { canvas, multiple: mt, x, y, children } = this;
            var startPos = [x.min * mt, y.min * mt];
            var bindHandler = throttle(function (e) {
                var offsetX = e.offsetX;
                var offsetY = e.offsetY;
                var x = (offsetX + startPos[0]) / mt;
                var y = (offsetY + startPos[1]) / mt;
                handler(eventExtends(e, {
                    coordinate: [x, y],
                    children: children
                }));
            });
            canvas.addEventListener(type, bindHandler);
            eventCache[eventIdx] = {
                type,
                handler: bindHandler
            };
            return eventIdx++;
        }
        off(idx) {
            var { type, handler } = eventCache[idx];
            delete eventCache[idx];
            this.canvas.removeEventListener(type, handler);
        }
    }
    function eventExtends(e, obj) {
        for (var i in obj) {
            e[i] = obj[i];
        }
        return e;
    }
    function multiple(x, y, w, h) {
        let mt = Math.min(w / (x.max - x.min), h / (y.max - y.min));
        return fixed(mt * 10) / 10;
    }
    class Trunk extends Canvas {
        constructor(feature) {
            super();
            this.feature = feature;
            this.multiple = 1;
            this.startPosition = [0, 0];
            let cacheX = cacheMaxAndMin();
            let cacheY = cacheMaxAndMin();
            let geometry = feature.geometry;
            this.type = geometry.type;
            if (geometry.type == 'MultiPolygon') {
                let data = geometry.coordinates;
                for (let i of data) {
                    for (let j of i) {
                        for (let n of j) {
                            cacheX(n[0]);
                            cacheY(n[1]);
                        }
                    }
                }
            }
            else {
                console.log(geometry.type);
            }
            this.x = cacheX();
            this.y = cacheY();
        }
        draw(width, height) {
            var { x, y, feature, type } = this;
            var mt;
            if (!height) {
                mt = this.multiple = width;
                width = ceil((this.x.max - this.x.min) * mt);
                height = ceil((this.y.max - this.y.min) * mt);
            }
            else {
                mt = this.multiple = multiple(x, y, width, height);
            }
            this.startPosition = [x.min, y.min];
            var canvas = this.getCanvas(width, height);
            var ctx = canvas.getContext('2d');
            var start = [-x.min * mt, -y.min * mt];
            if (type == 'MultiPolygon') {
                var data = feature.geometry.coordinates;
                drawMultiPolygon(ctx, data, mt, start);
            }
            else {
                console.log(type);
            }
        }
        isContent(point) {
            var { x, y } = this;
            if (x.max < point[0] || x.min > point[0] || y.max < point[1] || y.min > point[1])
                return false;
            var isContent = false;
            var rowFn = slope(point, [point[0] + 1, point[1]]);
            var columnFn = slope(point, [point[0], point[1] + 1]);
            this.filter(function (array, _break) {
                for (let i of array) {
                    let leftNum = 0, rightNum = 0;
                    for (let j = 0, len = i.length; j < len - 1; j++) {
                        if (rowFn(i[j]) != rowFn(i[j + 1])) {
                            if (columnFn(i[j]) >= 0)
                                rightNum++;
                            else
                                leftNum++;
                        }
                    }
                    if (leftNum % 2 == 1 && rightNum % 2 == 1) {
                        isContent = true;
                        return _break;
                    }
                }
            });
            return isContent;
        }
        filter(fn) {
            var cache = [];
            let _break = {};
            for (var i of this.feature.geometry.coordinates) {
                var _return = fn(i, _break);
                if (_return === _break)
                    break;
                else if (!!_return == true)
                    cache.push(i);
            }
            return cache;
        }
    }
    function slope([x1, y1], [x2, y2]) {
        return function ([x, y]) {
            var testY = (x - x1) / (x2 - x1) * (y2 - y1) + y1;
            return testY > y ? 1 : testY < y ? -1 : 0;
        };
    }
    function drawMultiPolygon(ctx, data, mt = 1, start) {
        ctx.translate(...start);
        for (let i of data) {
            for (let j of i) {
                lineFormTo(ctx, j, mt);
            }
        }
    }
    function cacheMaxAndMin() {
        var cache = { max: -Infinity, min: Infinity };
        return function (value) {
            if (value) {
                if (value > cache.max)
                    cache.max = value;
                if (value < cache.min)
                    cache.min = value;
            }
            return cache;
        };
    }
    function lineFormTo(ctx, arr, mt) {
        arr = times(arr, mt);
        ctx.beginPath();
        ctx.moveTo(...arr[0]);
        for (let i in arr) {
            let [x, y] = arr[i];
            x = fixed(x) + .5;
            y = fixed(y) + .5;
            ctx.lineTo(x, y);
        }
        ctx.stroke();
        ctx.closePath();
    }
    function times(arr, times) {
        return arr.map(v => {
            return [v[0] * times, v[1] * times];
        });
    }
    function createNewCanvas(w, h) {
        let canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        return canvas;
    }
    function throttle(fn) {
        let queue = [];
        const req = window.requestAnimationFrame;
        return function (...arg) {
            if (queue.length === 0) {
                req(() => {
                    if (queue.length) {
                        fn.apply(this, queue.pop());
                        queue = [];
                    }
                });
            }
            ;
            queue.push(arg);
        };
    }
    ;
    return Geo;
});
//# sourceMappingURL=data:application/json;base64,